---
- block:
  - name: Force update brew after installation.
    command: "{{ homebrew_brew_bin_path }}/brew update --force"
    when: not homebrew_binary.stat.exists

  - name: Where is the cache?
    command: "{{ homebrew_brew_bin_path }}/brew --cache"
    register: homebrew_cache_path
    changed_when: false
    check_mode: false

  # Tap.
  - name: Ensure configured taps are tapped.
    homebrew_tap:
      tap: '{{ item.name | default(item) }}'
      url: '{{ item.url | default(omit) }}'
      state: present
    loop: "{{ homebrew_taps }}"

  # Cask.
  - name: Ensure blacklisted cask applications are not installed.
    homebrew_cask: "name={{ item }} state=absent"
    loop: "{{ homebrew_cask_uninstalled_apps }}"

  - name: Install configured cask applications.
    homebrew_cask:
      name: "{{ item.name | default(item) }}"
      state: present
      # yamllint disable-line rule:line-length
      install_options: "{{ item.install_options | default('appdir=' + homebrew_cask_appdir) }}"
      accept_external_apps: "{{ homebrew_cask_accept_external_apps }}"
    loop: "{{ homebrew_cask_apps }}"
    become: true

  # Brew.
  - name: Ensure blacklisted homebrew packages are not installed.
    homebrew: "name={{ item }} state=absent"
    loop: "{{ homebrew_uninstalled_packages }}"

  - name: Ensure configured homebrew packages are installed.
    homebrew:
      name: "{{ item.name | default(item) }}"
      install_options: "{{ item.install_options | default(omit) }}"
      state: present
    loop: "{{ homebrew_installed_packages }}"
    notify:
      - Clear homebrew cache

  - name: Upgrade all homebrew packages (if configured).
    homebrew: update_homebrew=yes upgrade_all=yes
    when: homebrew_upgrade_all_packages
    notify:
      - Clear homebrew cache

  - name: Check for Brewfile.
    stat:
      path: "{{ homebrew_brewfile_dir }}/Brewfile"
    register: homebrew_brewfile
    check_mode: false

  - name: Install from Brewfile.
    command: "brew bundle chdir={{ homebrew_brewfile_dir }}"
    when: homebrew_brewfile.stat.exists and homebrew_use_brewfile

  # Privilege escalation is only required for inner steps when
  # the `homebrew_user` doesn't match the `ansible_user_id`
  become: "{{ (homebrew_user != ansible_user_id) | bool }}"
  become_user: "{{ homebrew_user }}"

...
